{"ast":null,"code":"import { createReducer, on } from '@ngrx/store';\nimport { createEntityAdapter } from '@ngrx/entity';\nimport { loadUsers, loadUsersFailure, loadUsersSuccess } from './users.actions';\nexport const userAdapter = createEntityAdapter({\n  selectId: user => user.id\n});\nexport const initialState = userAdapter.getInitialState({\n  loading: false,\n  error: null\n});\nexport const userReducer = createReducer(initialState, on(loadUsers, state => ({\n  ...state,\n  loading: true\n})), on(loadUsersSuccess, (state, {\n  users\n}) => userAdapter.setAll(users, {\n  ...state,\n  loading: false,\n  error: null\n})), on(loadUsersFailure, (state, {\n  error\n}) => ({\n  ...state,\n  loading: false,\n  error\n})));","map":{"version":3,"mappings":"AAAA,SAASA,aAAa,EAAEC,EAAE,QAAQ,aAAa;AAC/C,SAAsBC,mBAAmB,QAAQ,cAAc;AAE/D,SAASC,SAAS,EAAEC,gBAAgB,EAAEC,gBAAgB,QAAQ,iBAAiB;AAO/E,OAAO,MAAMC,WAAW,GAAGJ,mBAAmB,CAAO;EACnDK,QAAQ,EAAGC,IAAU,IAAKA,IAAI,CAACC;CAChC,CAAC;AAEF,OAAO,MAAMC,YAAY,GAAcJ,WAAW,CAACK,eAAe,CAAC;EACjEC,OAAO,EAAE,KAAK;EACdC,KAAK,EAAE;CACR,CAAC;AAEF,OAAO,MAAMC,WAAW,GAAGd,aAAa,CACtCU,YAAY,EACZT,EAAE,CAACE,SAAS,EAAGY,KAAK,KAAM;EAAE,GAAGA,KAAK;EAAEH,OAAO,EAAE;AAAI,CAAE,CAAC,CAAC,EACvDX,EAAE,CAACI,gBAAgB,EAAE,CAACU,KAAK,EAAE;EAAEC;AAAK,CAAE,KACpCV,WAAW,CAACW,MAAM,CAACD,KAAK,EAAE;EAAE,GAAGD,KAAK;EAAEH,OAAO,EAAE,KAAK;EAAEC,KAAK,EAAE;AAAI,CAAE,CAAC,CACrE,EACDZ,EAAE,CAACG,gBAAgB,EAAE,CAACW,KAAK,EAAE;EAAEF;AAAK,CAAE,MAAM;EAC1C,GAAGE,KAAK;EACRH,OAAO,EAAE,KAAK;EACdC;CACD,CAAC,CAAC,CACJ","names":["createReducer","on","createEntityAdapter","loadUsers","loadUsersFailure","loadUsersSuccess","userAdapter","selectId","user","id","initialState","getInitialState","loading","error","userReducer","state","users","setAll"],"sourceRoot":"","sources":["/Users/suneelkraguru/Downloads/interview-starter/src/app/_state/users/users.reducer.ts"],"sourcesContent":["import { createReducer, on } from '@ngrx/store';\nimport { EntityState, createEntityAdapter } from '@ngrx/entity';\nimport { User } from './users-store';\nimport { loadUsers, loadUsersFailure, loadUsersSuccess } from './users.actions';\n\nexport interface UserState extends EntityState<User> {\n  loading: boolean;\n  error: any;\n}\n\nexport const userAdapter = createEntityAdapter<User>({\n  selectId: (user: User) => user.id,\n});\n\nexport const initialState: UserState = userAdapter.getInitialState({\n  loading: false,\n  error: null,\n});\n\nexport const userReducer = createReducer(\n  initialState,\n  on(loadUsers, (state) => ({ ...state, loading: true })),\n  on(loadUsersSuccess, (state, { users }) =>\n    userAdapter.setAll(users, { ...state, loading: false, error: null })\n  ),\n  on(loadUsersFailure, (state, { error }) => ({\n    ...state,\n    loading: false,\n    error,\n  }))\n);\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}