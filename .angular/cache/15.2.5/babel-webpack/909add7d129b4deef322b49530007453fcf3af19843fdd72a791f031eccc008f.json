{"ast":null,"code":"import { CommonModule } from '@angular/common';\nimport { MatTableDataSource, MatTableModule } from '@angular/material/table';\nimport { MatPaginator, MatPaginatorModule } from '@angular/material/paginator';\nimport { MatSort, MatSortModule } from '@angular/material/sort';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@app/_shared/user.service\";\nexport class UsersComponent {\n  constructor(userService) {\n    this.userService = userService;\n    this.displayedColumns = ['id', 'firstName', 'lastName', 'email'];\n    this.isLoading = true;\n  }\n  ngOnInit() {\n    this.loadUsers();\n  }\n  loadUsers() {\n    this.isLoading = true;\n    this.userService.getUsers().subscribe(users => {\n      this.dataSource = new MatTableDataSource(users);\n      this.dataSource.paginator = this.paginator;\n      this.dataSource.sort = this.sort;\n      this.isLoading = false;\n    }, error => {\n      console.error(error);\n      this.isLoading = false;\n    });\n  }\n  applyFilter(event) {\n    const filterValue = event.target.value;\n    this.dataSource.filter = filterValue.trim().toLowerCase();\n    if (this.dataSource.paginator) {\n      this.dataSource.paginator.firstPage();\n    }\n  }\n  toggleRow(user) {\n    if (this.expandedUser === user) {\n      this.expandedUser = null;\n    } else {\n      this.expandedUser = user;\n    }\n  }\n  isRowExpanded(user) {\n    return this.expandedUser === user;\n  }\n}\nUsersComponent.ɵfac = function UsersComponent_Factory(t) {\n  return new (t || UsersComponent)(i0.ɵɵdirectiveInject(i1.UserService));\n};\nUsersComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: UsersComponent,\n  selectors: [[\"app-users\"]],\n  viewQuery: function UsersComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(MatPaginator, 5);\n      i0.ɵɵviewQuery(MatSort, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.paginator = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.sort = _t.first);\n    }\n  },\n  standalone: true,\n  features: [i0.ɵɵStandaloneFeature],\n  decls: 1,\n  vars: 0,\n  consts: [[1, \"table-container\", \"mat-elevation-z8\"]],\n  template: function UsersComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelement(0, \"div\", 0);\n    }\n  },\n  dependencies: [CommonModule, MatTableModule, MatPaginatorModule, MatSortModule],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"AACA,SAASA,YAAY,QAAQ,iBAAiB;AAE9C,SAASC,kBAAkB,EAAEC,cAAc,QAAQ,yBAAyB;AAC5E,SAASC,YAAY,EAAEC,kBAAkB,QAAQ,6BAA6B;AAC9E,SAASC,OAAO,EAAEC,aAAa,QAAQ,wBAAwB;;;AAe/D,OAAM,MAAOC,cAAc;EAUzBC,YAAoBC,WAAwB;IAAxB,gBAAW,GAAXA,WAAW;IARxB,qBAAgB,GAAa,CAAC,IAAI,EAAE,WAAW,EAAE,UAAU,EAAE,OAAO,CAAC;IAE5E,cAAS,GAAY,IAAI;EAMuB;EAEhDC,QAAQ;IACN,IAAI,CAACC,SAAS,EAAE;EAClB;EAEAA,SAAS;IACP,IAAI,CAACC,SAAS,GAAG,IAAI;IACrB,IAAI,CAACH,WAAW,CAACI,QAAQ,EAAE,CAACC,SAAS,CAACC,KAAK,IAAG;MAC5C,IAAI,CAACC,UAAU,GAAG,IAAIf,kBAAkB,CAACc,KAAK,CAAC;MAC/C,IAAI,CAACC,UAAU,CAACC,SAAS,GAAG,IAAI,CAACA,SAAS;MAC1C,IAAI,CAACD,UAAU,CAACE,IAAI,GAAG,IAAI,CAACA,IAAI;MAChC,IAAI,CAACN,SAAS,GAAG,KAAK;IACxB,CAAC,EAAEO,KAAK,IAAG;MACTC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;MACpB,IAAI,CAACP,SAAS,GAAG,KAAK;IACxB,CAAC,CAAC;EACJ;EAEAS,WAAW,CAACC,KAAY;IACtB,MAAMC,WAAW,GAAID,KAAK,CAACE,MAA2B,CAACC,KAAK;IAC5D,IAAI,CAACT,UAAU,CAACU,MAAM,GAAGH,WAAW,CAACI,IAAI,EAAE,CAACC,WAAW,EAAE;IAEzD,IAAI,IAAI,CAACZ,UAAU,CAACC,SAAS,EAAE;MAC7B,IAAI,CAACD,UAAU,CAACC,SAAS,CAACY,SAAS,EAAE;;EAEzC;EAEAC,SAAS,CAACC,IAAU;IAClB,IAAI,IAAI,CAACC,YAAY,KAAKD,IAAI,EAAE;MAC9B,IAAI,CAACC,YAAY,GAAG,IAAI;KACzB,MAAM;MACL,IAAI,CAACA,YAAY,GAAGD,IAAI;;EAE5B;EAEAE,aAAa,CAACF,IAAU;IACtB,OAAO,IAAI,CAACC,YAAY,KAAKD,IAAI;EACnC;;AAhDWxB,cAAc;mBAAdA,cAAc;AAAA;AAAdA,cAAc;QAAdA,cAAc;EAAA2B;EAAAC;IAAA;qBAOdhC,YAAY;qBACZE,OAAO;;;;;;;;;;;;;;;MC5BpB+B,yBAwCQ;;;iBD5BJpC,YAAY,EACZE,cAAc,EACdE,kBAAkB,EAClBE,aAAa;EAAA+B;AAAA","names":["CommonModule","MatTableDataSource","MatTableModule","MatPaginator","MatPaginatorModule","MatSort","MatSortModule","UsersComponent","constructor","userService","ngOnInit","loadUsers","isLoading","getUsers","subscribe","users","dataSource","paginator","sort","error","console","applyFilter","event","filterValue","target","value","filter","trim","toLowerCase","firstPage","toggleRow","user","expandedUser","isRowExpanded","selectors","viewQuery","i0","styles"],"sourceRoot":"","sources":["/Users/suneelkraguru/Downloads/interview-starter/src/app/_pages/users/users.component.ts","/Users/suneelkraguru/Downloads/interview-starter/src/app/_pages/users/users.component.html"],"sourcesContent":["import { Component, OnInit, ViewChild } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { UserService } from '@app/_shared/user.service';\nimport { MatTableDataSource, MatTableModule } from '@angular/material/table';\nimport { MatPaginator, MatPaginatorModule } from '@angular/material/paginator';\nimport { MatSort, MatSortModule } from '@angular/material/sort';\nimport { User } from '@app/_state/users/users-store';\n\n@Component({\n  selector: 'app-users',\n  standalone: true,\n  imports: [\n    CommonModule,\n    MatTableModule,\n    MatPaginatorModule,\n    MatSortModule,\n  ],\n  templateUrl: './users.component.html',\n  styleUrls: ['./users.component.scss']\n})\nexport class UsersComponent implements OnInit{\n\n  public displayedColumns: string[] = ['id', 'firstName', 'lastName', 'email'];\n  public dataSource: MatTableDataSource<User>;\n  isLoading: boolean = true;\n  expandedUser: User | null; // keep track of expanded user for toggling\n\n  @ViewChild(MatPaginator) paginator: MatPaginator;\n  @ViewChild(MatSort) sort: MatSort;\n\n  constructor(private userService: UserService) { }\n\n  ngOnInit() {\n    this.loadUsers();\n  }\n\n  loadUsers() {\n    this.isLoading = true;\n    this.userService.getUsers().subscribe(users => {\n      this.dataSource = new MatTableDataSource(users);\n      this.dataSource.paginator = this.paginator;\n      this.dataSource.sort = this.sort;\n      this.isLoading = false;\n    }, error => {\n      console.error(error);\n      this.isLoading = false;\n    });\n  }\n\n  applyFilter(event: Event) {\n    const filterValue = (event.target as HTMLInputElement).value;\n    this.dataSource.filter = filterValue.trim().toLowerCase();\n\n    if (this.dataSource.paginator) {\n      this.dataSource.paginator.firstPage();\n    }\n  }\n\n  toggleRow(user: User) {\n    if (this.expandedUser === user) {\n      this.expandedUser = null;\n    } else {\n      this.expandedUser = user;\n    }\n  }\n\n  isRowExpanded(user: User) {\n    return this.expandedUser === user;\n  }\n\n}","<div class=\"table-container mat-elevation-z8\">\n\n    <!-- <mat-form-field>\n      <input matInput (keyup)=\"applyFilter($event)\" placeholder=\"Filter\">\n    </mat-form-field>-->\n  \n    <!-- <mat-progress-bar *ngIf=\"isLoading\" mode=\"indeterminate\"></mat-progress-bar> -->\n  \n    <!-- <table mat-table [dataSource]=\"dataSource\" matSort>\n  \n      <ng-container matColumnDef=\"id\">\n        <th mat-header-cell *matHeaderCellDef mat-sort-header> ID </th>\n        <td mat-cell *matCellDef=\"let user\">{{ user.id }}</td>\n      </ng-container>\n  \n      <ng-container matColumnDef=\"firstName\">\n        <th mat-header-cell *matHeaderCellDef mat-sort-header> First Name </th>\n        <td mat-cell *matCellDef=\"let user\" (click)=\"toggleRow(user)\" [class.expanded]=\"isRowExpanded(user)\">\n          <div>{{ user.firstName }}</div>\n          <div *ngIf=\"isRowExpanded(user)\">Details: {{ user.lastName }}, {{ user.email }}</div>\n        </td>\n      </ng-container>\n  \n      <ng-container matColumnDef=\"lastName\">\n        <th mat-header-cell *matHeaderCellDef mat-sort-header> Last Name </th>\n        <td mat-cell *matCellDef=\"let user\">{{ user.lastName }}</td>\n      </ng-container>\n  \n      <ng-container matColumnDef=\"email\">\n        <th mat-header-cell *matHeaderCellDef mat-sort-header> Email </th>\n        <td mat-cell *matCellDef=\"let user\">{{ user.email }}</td>\n      </ng-container>\n  \n      <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n      <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\" [class.expanded]=\"isRowExpanded(row)\"></tr>\n  \n    </table>\n  \n    <mat-paginator [pageSizeOptions]=\"[10, 25, 50]\" showFirstLastButtons></mat-paginator> -->\n  \n  </div>\n  "]},"metadata":{},"sourceType":"module","externalDependencies":[]}