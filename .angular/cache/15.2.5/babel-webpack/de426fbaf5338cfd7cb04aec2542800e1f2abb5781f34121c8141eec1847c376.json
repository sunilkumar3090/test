{"ast":null,"code":"import { createEffect, ofType } from '@ngrx/effects';\nimport { catchError, map, mergeMap } from 'rxjs/operators';\nimport { of } from 'rxjs';\nimport * as UserActions from './users.actions';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nimport * as i2 from \"@app/_shared/user.service\";\nexport class UserEffects {\n  constructor(actions$, userService) {\n    this.actions$ = actions$;\n    this.userService = userService;\n    this.loadUsers$ = createEffect(() => this.actions$.pipe(ofType(UserActions.loadUsers), mergeMap(() => this.userService.getUsers().pipe(map(users => UserActions.loadUsersSuccess({\n      users: users.users\n    })), catchError(error => of(UserActions.loadUsersFailure({\n      error\n    })))))));\n  }\n}\nUserEffects.ɵfac = function UserEffects_Factory(t) {\n  return new (t || UserEffects)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.UserService));\n};\nUserEffects.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: UserEffects,\n  factory: UserEffects.ɵfac\n});","map":{"version":3,"mappings":"AACA,SAAkBA,YAAY,EAAEC,MAAM,QAAQ,eAAe;AAC7D,SAASC,UAAU,EAAEC,GAAG,EAAEC,QAAQ,QAAQ,gBAAgB;AAC1D,SAASC,EAAE,QAAQ,MAAM;AACzB,OAAO,KAAKC,WAAW,MAAM,iBAAiB;;;;AAI9C,OAAM,MAAOC,WAAW;EAiBtBC,YACUC,QAAiB,EACjBC,WAAwB;IADxB,aAAQ,GAARD,QAAQ;IACR,gBAAW,GAAXC,WAAW;IAlBrB,eAAU,GAAGV,YAAY,CAAC,MACxB,IAAI,CAACS,QAAQ,CAACE,IAAI,CAChBV,MAAM,CAACK,WAAW,CAACM,SAAS,CAAC,EAC7BR,QAAQ,CAAC,MACP,IAAI,CAACM,WAAW,CAACG,QAAQ,EAAE,CAACF,IAAI,CAC9BR,GAAG,CAAEW,KAAK,IACRR,WAAW,CAACS,gBAAgB,CAAE;MAACD,KAAK,EAACA,KAAK,CAACA;IAAK,CAAC,CAAC,CACnD,EACDZ,UAAU,CAAEc,KAAK,IACfX,EAAE,CAACC,WAAW,CAACW,gBAAgB,CAAC;MAAED;IAAK,CAAE,CAAC,CAAC,CAC5C,CACF,CACF,CACF,CACF;EAKE;;AApBQT,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAW,SAAXX,WAAW;AAAA","names":["createEffect","ofType","catchError","map","mergeMap","of","UserActions","UserEffects","constructor","actions$","userService","pipe","loadUsers","getUsers","users","loadUsersSuccess","error","loadUsersFailure","factory"],"sourceRoot":"","sources":["/Users/suneelkraguru/Downloads/interview-starter/src/app/_state/users/users.effects.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\nimport { catchError, map, mergeMap } from 'rxjs/operators';\nimport { of } from 'rxjs';\nimport * as UserActions from './users.actions';\nimport { UserService } from '@app/_shared/user.service';\n\n@Injectable()\nexport class UserEffects {\n  loadUsers$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(UserActions.loadUsers),\n      mergeMap(() =>\n        this.userService.getUsers().pipe(\n          map((users) =>\n            UserActions.loadUsersSuccess( {users:users.users})\n          ),\n          catchError((error) =>\n            of(UserActions.loadUsersFailure({ error }))\n          )\n        )\n      )\n    )\n  );\n\n  constructor(\n    private actions$: Actions,\n    private userService: UserService\n  ) {}\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}