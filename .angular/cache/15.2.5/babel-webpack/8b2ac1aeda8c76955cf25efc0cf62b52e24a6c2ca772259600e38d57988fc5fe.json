{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, ViewChild } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatTableDataSource, MatTableModule } from '@angular/material/table';\nimport { MatPaginator, MatPaginatorModule } from '@angular/material/paginator';\nimport { MatSort, MatSortModule } from '@angular/material/sort';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatIconModule } from '@angular/material/icon';\nimport { FormsModule } from '@angular/forms';\nimport { MatInputModule } from '@angular/material/input';\nlet UsersComponent = class UsersComponent {\n  constructor(userService) {\n    this.userService = userService;\n    this.displayedColumns = ['id', 'firstName', 'lastName', 'email', 'actions', 'expandedDetail'];\n    this.isLoading = true;\n  }\n  ngOnInit() {\n    this.loadUsers();\n  }\n  loadUsers() {\n    this.isLoading = true;\n    this.userService.getUsers().subscribe(users => {\n      if (users.users.length) {\n        this.dataSource = new MatTableDataSource(users.users);\n        console.log(this.dataSource);\n        this.dataSource.paginator = this.paginator;\n        this.dataSource.sort = this.sort;\n        this.isLoading = false;\n      }\n    }, error => {\n      console.error(error);\n      this.isLoading = false;\n    });\n  }\n  applyFilter(event) {\n    const filterValue = event.target.value;\n    this.dataSource.filter = filterValue.trim().toLowerCase();\n  }\n  toggleEdit(user) {\n    console.log(user);\n    user.editing = !user.editing;\n    if (user.editing) {\n      // Make a copy of the user to allow canceling changes\n      user.editingUser = Object.assign({}, user);\n    }\n  }\n  save(user) {\n    // Simulate saving changes to a data source\n    user.editing = false;\n    user.editingUser = null;\n  }\n  cancel(user) {\n    // Cancel editing and restore the original user data\n    user.editing = false;\n    Object.assign(user, user.editingUser);\n    user.editingUser = null;\n  }\n};\n__decorate([ViewChild(MatPaginator)], UsersComponent.prototype, \"paginator\", void 0);\n__decorate([ViewChild(MatSort)], UsersComponent.prototype, \"sort\", void 0);\nUsersComponent = __decorate([Component({\n  selector: 'app-users',\n  standalone: true,\n  imports: [CommonModule, MatTableModule, MatPaginatorModule, MatSortModule, MatProgressBarModule, MatFormFieldModule, MatInputModule, MatIconModule, FormsModule],\n  templateUrl: './users.component.html',\n  styleUrls: ['./users.component.scss']\n})], UsersComponent);\nexport { UsersComponent };","map":{"version":3,"mappings":"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","names":["Component","ViewChild","CommonModule","MatTableDataSource","MatTableModule","MatPaginator","MatPaginatorModule","MatSort","MatSortModule","MatProgressBarModule","MatFormFieldModule","MatIconModule","FormsModule","MatInputModule","UsersComponent","constructor","userService","ngOnInit","loadUsers","isLoading","getUsers","subscribe","users","length","dataSource","console","log","paginator","sort","error","applyFilter","event","filterValue","target","value","filter","trim","toLowerCase","toggleEdit","user","editing","editingUser","Object","assign","save","cancel","__decorate","selector","standalone","imports","templateUrl","styleUrls"],"sourceRoot":"","sources":["/Users/suneelkraguru/Downloads/interview-starter/src/app/_pages/users/users.component.ts"],"sourcesContent":["import { Component, OnInit, ViewChild } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { UserService } from '@app/_shared/user.service';\nimport { MatTableDataSource, MatTableModule } from '@angular/material/table';\nimport { MatPaginator, MatPaginatorModule } from '@angular/material/paginator';\nimport { MatSort, MatSortModule } from '@angular/material/sort';\nimport {MatProgressBarModule} from '@angular/material/progress-bar';\nimport { User } from '@app/_state/users/users-store';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport {MatIconModule} from '@angular/material/icon';\nimport { FormsModule } from '@angular/forms';\nimport { MatInputModule } from '@angular/material/input';\n\n@Component({\n  selector: 'app-users',\n  standalone: true,\n  imports: [\n    CommonModule,\n    MatTableModule,\n    MatPaginatorModule,\n    MatSortModule,\n    MatProgressBarModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatIconModule,\n    FormsModule\n  ],\n  templateUrl: './users.component.html',\n  styleUrls: ['./users.component.scss']\n})\nexport class UsersComponent implements OnInit{\n\n  displayedColumns: string[] = ['id', 'firstName', 'lastName', 'email','actions','expandedDetail'];\n  dataSource: MatTableDataSource<User>;\n  isLoading: boolean = true;\n  expandedUser: User | null; // keep track of expanded user for toggling\n  expandedElement:User | null;\n  @ViewChild(MatPaginator) paginator: MatPaginator;\n  @ViewChild(MatSort) sort: MatSort;\n\n  constructor(private userService: UserService) { }\n\n  ngOnInit() {\n    this.loadUsers();\n  }\n\n  loadUsers() {\n    this.isLoading = true;\n    this.userService.getUsers().subscribe(users => {\n      if (users.users.length) { \n      this.dataSource = new MatTableDataSource(users.users);\n      console.log(this.dataSource);\n      this.dataSource.paginator = this.paginator;\n      this.dataSource.sort = this.sort;\n      this.isLoading = false;\n      }\n    }, error => {\n      console.error(error);\n      this.isLoading = false;\n    });\n  }\n\n  \n\n  applyFilter(event: Event) {\n    const filterValue = (event.target as HTMLInputElement).value;\n    this.dataSource.filter = filterValue.trim().toLowerCase();\n  }\n\n  toggleEdit(user: User) {\n    console.log(user);\n    user.editing = !user.editing;\n    if (user.editing) {\n      // Make a copy of the user to allow canceling changes\n      user.editingUser = Object.assign({}, user);\n    }\n  }\n\n  save(user: User) {\n    // Simulate saving changes to a data source\n    user.editing = false;\n    user.editingUser = null;\n  }\n\n  cancel(user: User) {\n    // Cancel editing and restore the original user data\n    user.editing = false;\n    Object.assign(user, user.editingUser);\n    user.editingUser = null;\n  }\n\n  // isRowExpanded(user: User) {\n  //   return this.expandedUser === user;\n  // }\n  // save(user: User) {\n  //   // this.userService.updateUser(user).subscribe(() => {\n  //   //   user.editing = false;\n  //   //   this.expandedUser = null;\n  //   // });\n  // }\n\n  // cancel(user: User) {\n  //   // user.editing = false;\n  //   // this.expandedUser = null;\n  // }\n  // applyFilter(event: Event) {\n  //   const filterValue = (event.target as HTMLInputElement).value;\n  //   this.dataSource.filter = filterValue.trim().toLowerCase();\n  // }\n\n  // toggleEdit(user: User) {\n  //   user.editing = !user.editing;\n  //   if (user.editing) {\n  //     this.expandedElement = user;\n  //   } else {\n  //     this.expandedElement = null;\n  //   }\n  // }\n\n  // deleteUser(user:User){\n\n  // }\n\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}